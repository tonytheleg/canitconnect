package v1

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
)

type CurlData struct {
	Url string `json:"url"`
	//	HTTPProxy  string `json:"http_proxy"`
	//  HTTPSProxy string `json:"https_proxy"`
}

func Curl(w http.ResponseWriter, r *http.Request) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582" -d '{"type":"A","name":"www","data":"162.10.66.0","priority":null,"port":null,"weight":null}' "https://api.digitalocean.com/v2/domains/example.com/records"
	body, _ := ioutil.ReadAll(r.Body)
	params := make(map[string]string)
	err := json.Unmarshal(body, &params)
	if err != nil {
		log.Println("Failed to unmarshal json into params")
	}

	data := CurlData{
		Url: params["url"],
		//HTTPProxy: params["http_proxy"],
		//HTTPSProxy: params["https_proxy"],,
		// fill struct
	}

	payloadBytes, err := json.Marshal(data)
	if err != nil {
		// handle err
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "https://api.digitalocean.com/v2/domains/example.com/records", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer b7d03a6947b217efb6f3ec3bd3504582")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
}
